#include <iostream>
#include <list>
#include <string>
using namespace std;

//list 容器的排序案例 对于自定义数据类型 做排序
//按照年龄进行升序，如果年龄相同按照身高进行降序
class Person
{
public:
    Person(string name,int age,int height)
    {
        this->m_age=age;
        this->m_name=name;
        this->m_height=height;
    }
    string m_name;//姓名
    int m_age;//年龄
    int m_height;//身高
};

//指定它的排序规则
bool comparePerson(Person &p1,Person &p2)
{
    //按照年龄 升序
    if(p1.m_age==p2.m_age)
    {
        //年龄相同 按照身高降序
        return p1.m_height>p2.m_height;
    }
    else
    {
        return p1.m_age<p2.m_age;
    }
}

void test01()
{
    list<Person>l1;//创建容器

    //准备数据
    Person p1("liubei",35,175);
    Person p2("caocao",45,180);
    Person p3("sunquan",40,170);
    Person p4("zhaoyun",25,190);
    Person p5("zhangfei",35,160);
    Person p6("guanyu",35,200);

    //向容器中插入数据
    l1.push_back(p1);
    l1.push_back(p2);
    l1.push_back(p3);
    l1.push_back(p4);
    l1.push_back(p5);
    l1.push_back(p6);

    for(list<Person>::iterator it=l1.begin();it!=l1.end();it++)
    {
        cout<<"name: "<<(*it).m_name<<"  "<<"age: "<<(*it).m_age<<" "<<"height: "<<(*it).m_height;
        cout<<endl;
    }

    //排序
    cout<<"--------------------------------"<<endl;
    cout<<"after sort: "<<endl;
    l1.sort(comparePerson);
    for(list<Person>::iterator it=l1.begin();it!=l1.end();it++)
    {
        cout<<"name: "<<(*it).m_name<<"  "<<"age: "<<(*it).m_age<<" "<<"height: "<<(*it).m_height;
        cout<<endl;
    }
}
int main() {
    test01();
    return 0;
}
