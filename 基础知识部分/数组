//
// Created by Williams on 2022/7/5.
//
#include<iostream>
#include<string>
using namespace std;
int main()
{
    //数组
    /*
     1、数据类型  数组名[数组长度]；
     2、数据类型  数组名[数组长度]={值1，值2……}；
     3、数据类型  数组名[]={值1，值2……}；
     */
    //1、数据类型  数组名[数组长度]；
//    int arr[5];
    //给数组中的元素进行赋值
    //数组元素的下标是从0开始索引的
//    arr[0]=10;
//    arr[1]=20;
//    arr[2]=30;
//    arr[3]=40;
//    arr[4]=50;
    //访问数据元素
//    for(int i=0;i<5;i++)
//    {
//        cout<<arr[i]<<endl;
//    }
    //2、数据类型  数组名[数组长度]={值1，值2……}；
//    int arr2[5]={10,20,30,40,50};
    //访问数据元素
//    for(int i=0;i<5;i++)
//    {
//        cout<<arr2[i]<<endl;
//    }
    //3、数据类型  数组名[]={值1，值2……}；
//    int arr3[]={90,80,70,60,50,40,30,20,10};
//    for(int i=0;i<9;i++)
//    {
//        cout<<arr3[i]<<endl;
//    }

      /*
      //一维数组数组名的用途：
      // 1、可以统计整个数组在内存中的长度
      int arr[10]={1,2,3,4,5,6,7,8,9,10};
      cout<<"整个数组占用内存空间为："<<sizeof(arr)<<endl;
      cout<<"每个元素占用内存空间为："<<sizeof(arr[0])<<endl;
      cout<<"数组中元素个数为："<<sizeof(arr)/sizeof(arr[0])<<endl;
      // 2、可以获取数组在内存中的首地址
      cout<<"数组的首地址为："<<(long long)arr<<endl;
      cout<<"数组中第一个元素地址为："<<(long long)&arr[0]<<endl;
      cout<<"数组中第二个元素地址为："<<(long long)&arr[1]<<endl;
      //数组名是常量，不可以进行赋值操作arr=100;

      //1、创建5只小猪体重的数组
      int arr[5]={300,350,200,400,250};
      //2、从数组中找到最大值
      int max=0;
      for(int i=0;i<5;i++)
      {
          if(arr[i]>max)//如果访问的数组中的元素比我认定的最大值还要大，更新最大值
          {
              max=arr[i];
          }
      }
      //3、打印最大值
      cout<<"最重的小猪体重为："<<max<<endl;

      //实现数组元素逆置
      //1、创建数组
      int arr[5]={1,3,2,5,4};
      cout<<"数组逆置前："<<endl;
      for(int i=0;i<5;i++)
      {
          cout<<arr[i];
      }
      cout<<endl;
      //2、实现逆置
      //2.1、记录起始下标的位置
      //2.2、记录结束下标的位置
      //2.3、起始下标与结束下标的元素互换
      //2.4、起始位置++，结束位置--
      //2.5、循环执行2.1操作，直至起始位置>=结束位置
      int start=0;//起始下标
      int end=sizeof(arr)/sizeof(arr[0])-1;//结束下标
      while(start<end)
      {
          //实现元素互换
          int temp=arr[start];
          arr[start]=arr[end];
          arr[end]=temp;
          //下标更新
          start++;
          end--;
      }
      //3、打印逆置后的数组
      cout<<"数组元素逆置后："<<endl;
      for(int i=0;i<5;i++)
      {
        cout<<arr[i];
      }
       */

      /*
      //冒泡排序实现升序序列
      int arr[]={4,2,8,0,5,7,1,3,9};
      cout<<"排序前的结果"<<endl;
      for(int i=0;i<9;i++)
      {
          cout<<arr[i]<<" ";
      }
      cout<<endl;
      //开始冒泡排序
      //总共排序轮数为 元素个数-1
      for(int i=0;i<9-1;i++)
      {
          //内层循环对比  次数 = 元素个数 - 当前轮数 - 1
          for(int j=0;j<9-i-1;j++)
          {
              //如果第一个数字，比第二个数字大，交换两个数字
              if(arr[j]>arr[j+1])
              {
                  int temp=arr[j];
                  arr[j]=arr[j+1];
                  arr[j+1]=temp;
              }
          }
      }
    cout<<"排序后的结果"<<endl;
    for(int i=0;i<9;i++)
    {
        cout<<arr[i]<<" ";
    }
       */

      //二维数组定义方式
      /*
       1、数据类型  数组名[行数][列数]；
       2、数据类型  数组名[行数][列数]={{数据1，数据2}，{数据3.数据4}}；
       3、数据类型  数组名[行数][列数]={数据1，数据2，数据3，数据4}；
       4、数据类型  数组名[][列数]={数据1，数据2，数据3，数据4}；
       */
      //1、数据类型  数组名[行数][列数]；
//      int arr[2][3];
//      arr[0][0]=1;
//      arr[0][1]=2;
//      arr[0][2]=3;
//      arr[1][0]=4;
//      arr[1][1]=5;
//      arr[1][2]=6;
//      for(int i=0;i<2;i++)//外层循环打印行数
//      {
//          for(int j=0;j<3;j++)//内层循环打印列数
//          {
//              cout<<arr[i][j]<<" ";
//          }
//      }
      //2、数据类型  数组名[行数][列数]={{数据1，数据2}，{数据3.数据4}}；
//      int arr2[2][3]={
//              {1,2,3},
//              {4,5,6}
//      };
//    for(int i=0;i<2;i++)//外层循环打印行数
//    {
//        for(int j=0;j<3;j++)//内层循环打印列数
//        {
//            cout<<arr2[i][j]<<" ";
//        }
//        cout<<endl;
//    }
    //3、数据类型  数组名[行数][列数]={数据1，数据2，数据3，数据4}；
//    int arr3[2][3]={1,2,3,4,5,6};
//    for(int i=0;i<2;i++)//外层循环打印行数
//    {
//        for(int j=0;j<3;j++)//内层循环打印列数
//        {
//            cout<<arr3[i][j]<<" ";
//        }
//    }
    //4、数据类型  数组名[][列数]={数据1，数据2，数据3，数据4}；
//    int arr4[][3]={1,2,3,4,5,6};
//    for(int i=0;i<2;i++)//外层循环打印行数
//    {
//        for(int j=0;j<3;j++)//内层循环打印列数
//        {
//            cout<<arr4[i][j]<<" ";
//        }
//    }

      /*
      //二维数组数组名称用途
      //1、可以查看占用内存空间大小
      int arr[2][3]={
              {1,2,3},
              {4,5,6}
      };
      cout<<"二维数组占用内存空间为："<<sizeof(arr)<<endl;
      cout<<"二维数组第一行占用的内存为："<<sizeof(arr[0])<<endl;
      cout<<"二维数组第一个元素占用内存为："<<sizeof(arr[0][0])<<endl;
      cout<<"二维数组的行数为："<<sizeof(arr)/sizeof(arr[0])<<endl;
      cout<<"二位数字的列数为："<<sizeof(arr[0])/sizeof(arr[0][0])<<endl;
      //2、可以查看二维数组的首地址
      cout<<"二维数组的首地址为："<<arr<<endl;
      cout<<"二维数组第一行首地址为："<<arr[0]<<endl;
      cout<<"二维数组第二行首地址为："<<arr[1]<<endl;
      cout<<"二维数组第一个元素首地址为："<<&arr[0][0]<<endl;
      cout<<"二维数组第二个元素首地址为："<<&arr[0][1]<<endl;
       */

      //二维数组应用案例-考试成绩统计
      //1、创建二维数组
      int scores[3][3]=
              {
                      {100,100,100},
                      {90,50,100},
                      {60,70,80}
              };
      string names[3]={"张三","李四","王五"};
      //2、统计每个人的总和分数
      for(int i=0;i<3;i++)
      {
          int sum=0;
          for(int j=0;j<3;j++)
          {
              sum+=scores[i][j];
//              cout<<scores[i][j]<<"  ";
          }
          cout<<names[i]<<"的总分为："<<sum<<endl;
      }
}
