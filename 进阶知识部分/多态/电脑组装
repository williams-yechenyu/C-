#include<iostream>
using namespace std;

//抽象不同零件类
//抽象CPU类
class CPU
{
public:
	//抽象的计算函数
	virtual void calculate() = 0;
};
//抽象显卡类
class VideoCard
{
public:
	//抽象的显示函数
	virtual void display() = 0;
};
//抽象内存条类
class Memory
{
public:
	//抽象的存储函数
	virtual void storage() = 0;
};
//电脑类
class Computer
{
public:
	Computer(CPU *cpu,VideoCard *vc,Memory *mem)
	{
		m_cpu = cpu;
		m_vc = vc;
		m_mem = mem;
    }
	//提供工作的函数
	void work()
	{
		//让零件工作起来，调用接口
		m_cpu->calculate();
		m_vc->display();
		m_mem->storage();
	}
	//提供析构函数  释放3个电脑零件
	~Computer()
	{
		if (m_cpu != NULL)
		{
			delete m_cpu;
			m_cpu = NULL;
		}
		if (m_vc != NULL)
		{
			delete m_vc;
			m_vc = NULL;
		}
		if (m_mem != NULL)
		{
			delete m_mem;
			m_mem = NULL;
		}
	}
private:
	CPU* m_cpu;//CPU的零件指针
	VideoCard* m_vc;//显卡零件指针
	Memory* m_mem;//内存条零件指针
};
//具体厂商
//Intel厂商
class IntelCPU :public CPU
{
public:
	virtual void calculate()
	{
		cout << "Intel的CPU开始计算了！" << endl;
	}
};
class IntelVideoCard :public VideoCard
{
public:
	virtual void display()
	{
		cout << "Intel的显卡开始显示了！" << endl;
	}
};
class IntelMemory :public Memory
{
public:
	virtual void storage()
	{
		cout << "Intel的内存条开始存储了！" << endl;
	}
};
//Lenove
class LenoveCPU :public CPU
{
public:
	virtual void calculate()
	{
		cout << "Lenove的CPU开始计算了！" << endl;
	}
};
class LenoveVideoCard :public VideoCard
{
public:
	virtual void display()
	{
		cout << "Lenove的显卡开始显示了！" << endl;
	}
};
class LenoveMemory :public Memory
{
public:
	virtual void storage()
	{
		cout << "Lenove的内存条开始存储了！" << endl;
	}
};
void test01()
{
	//第一台电脑的零件
	CPU* intelCpu = new IntelCPU;
	VideoCard* intelCard = new IntelVideoCard;
	Memory* intelMem = new IntelMemory;

	//创建第一台电脑
	Computer* computer1 = new Computer(IntelCPU, intelCard, intelMem);
	computer1->work();
	delete computer1;

	cout << "----------------------------" << endl;
	cout << "第二台电脑开始工作" << endl;
	//创建第一台电脑
	Computer* computer2 = new Computer(new LenoveCPU,new LenoveVideoCard,new LenoveMemory);
	computer2->work();
	delete computer2;
}
int main()
{
	test01();
}
